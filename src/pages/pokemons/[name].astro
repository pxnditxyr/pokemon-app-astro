---
import MainLayout from '@layouts/MainLayout.astro'
import PokemonCard from '@components/pokemons/PokemonCard.astro'
import AudioPlayer from '@components/media/AudioPlayer.astro'
import Title from '@components/shared/Title.astro'

import type { GetStaticPaths } from "astro";
import type { IPokemonListResponse } from "@interfaces/pokemon-list.interface";
import { Icon } from 'astro-icon/components';


export const getStaticPaths = ( async () => {

  const response = await fetch( `https://pokeapi.co/api/v2/pokemon?limit=151` )
  const { results } = await response.json() as IPokemonListResponse

  const paths = results.map( ({ name, url }) => ({
    params: { name },
    props: { name, url }
  }) )

  return paths
}) satisfies GetStaticPaths;

const { name } = Astro.params
const { url }  = Astro.props

const id = url.split( '/' ).at( -2 )
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${ id }.ogg`
const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${ id }.png`
---

<MainLayout
  title={ `Pokemon - #${ id } ${ name }` }
  description={ `${ name }'s page` }
  image={ imageUrl }
>
  <nav class="py-4">
    <button class="text-blue-500 hover:underline text-lg font-bold" onclick="history.back()"> Return </button>
  </nav>
  <div class="px-4 py-8 flex flex-col gap-12 w-full items-center justify-center">
    <div class="flex items-center justify-center w-full gap-4">
      <Title> { name } </Title>

      <button
        id="favorite-button"
        class="hover:animate-pulse text-red-500 flex items-center justify-center"
        data-name={ name }
        data-id={ id }
      >
        <Icon
          name="heart-outline"
          size={ 50 }
          data-outline
        />
        <Icon
          name="heart-filled"
          size={ 50 }
          data-filled
          class="hidden"
        />
      </button>
    </div>

    <PokemonCard name={ name } url={ url } isBig/>

    <AudioPlayer src={ audioSrc } />
  </div>
</MainLayout>

<script>
interface IFavoritePokemon {
  name: string
  id:   number
}

// document.addEventListener( 'astro:before-preparation', () => {
//   console.log( 'before-preparation' )
// } )
//
// document.addEventListener( 'astro:after-preparation', () => {
//   console.log( 'after-preparation' )
// } )
//
// document.addEventListener( 'astro:before-swap', () => {
//   console.log( 'before-swap' )
// } )
//
// document.addEventListener( 'astro:after-swap', () => {
//   console.log( 'after-swap' )
// } )
//
// document.addEventListener( 'astro:page-load', () => {
//   console.log( 'page-load' )
// } )


const handlePageLoad = () => {

  let favoritePokemons : IFavoritePokemon[] = JSON.parse(
    localStorage.getItem( 'favorites' ) ?? '[]'
  )

  const favoriteButton = document.querySelector( '#favorite-button' ) as HTMLButtonElement

  if ( !favoriteButton ) return

  const name = favoriteButton.dataset.name ?? ''
  const id   = Number( favoriteButton.dataset.id ?? '' )
  const isFavorite = favoritePokemons.some( pokemon => pokemon.id === id )

  const heartOutline = favoriteButton.querySelector( '[data-outline]' ) as HTMLElement
  const heartFilled  = favoriteButton.querySelector( '[data-filled]' ) as HTMLElement

  if ( isFavorite ) {
    heartOutline.classList.add( 'hidden' )
    heartFilled.classList.remove( 'hidden' )
  }

  const toggleFavorite = () => {
    const isFavorite = favoritePokemons.some( pokemon => pokemon.id === id )
    if ( isFavorite )
      favoritePokemons = favoritePokemons.filter( pokemon => pokemon.id !== id )
    else
      favoritePokemons.push({ id, name })
    localStorage.setItem( 'favorites', JSON.stringify( favoritePokemons ) )
  }

  favoriteButton.addEventListener( 'click', () => {
    heartOutline.classList.toggle( 'hidden' )
    heartFilled.classList.toggle( 'hidden' )
    toggleFavorite()
  } )
}
document.addEventListener( 'astro:page-load', handlePageLoad )

</script>

<style>
a {
  @apply text-blue-500 hover:underline text-lg font-bold;
}
</style>
